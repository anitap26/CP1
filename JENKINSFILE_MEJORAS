pipeline {
    agent any

    stages {
        stage("HELLO") {
            steps {
                echo "Hola, este es mi primer pipeline"
            }
        }

        stage("Get Code") {
            steps {
                script {
                    git branch: 'feature_fix_racecond', url: 'https://github.com/anitap26/CP1.git'
                }
            }
        }

        stage("Comprobar dirección") {
            steps {
                sh "ls -l"
            }
        }

        stage("Comprobar espacio de trabajo") {
            steps {
                echo "Mi espacio de trabajo es ${env.WORKSPACE}"
            }
        }

        stage("Build") {
            steps {
                echo "No hago nada"
            }
        }

        stage("Pruebas unitarias") {
            steps {
                sh '''
                PYTHONPATH=$WORKSPACE python3 -m pytest test/unit
                python3 -m pytest --junitxml=result-unit.xml test/unit
                '''
            }
        }

        stage("Pruebas rest") {
            steps {
                script {
                    // Lanza el servidor Flask en segundo plano
                    echo "Iniciando servidor Flask..."
                    sh '''
                    export FLASK_APP=$WORKSPACE/app/api.py
                    python3 -m flask run &
                    FLASK_PID=$!
                    sleep 20 #Esperamos 20 segundos para que Flask esté listo
                    '''

                    // Verificación de que Flask está disponible
                    echo "Verificando que Flask está disponible en el puerto 5000..."
                    sh '''
                    while ! nc -z localhost 5000; do
                        echo "Esperando que Flask se inicie..."
                        sleep 1
                    done
                    echo "Flask está listo en el puerto 5000"
                    '''

                    // Lanza Wiremock en segundo plano
                    echo "Iniciando Wiremock..."
                    sh '''
                    java -jar /Users/anamunozallue/DESCARGAS/Wiremock/wiremock-standalone-3.10.0.jar --port 9090 --root-dir /Users/anamunozallue/DESCARGAS/Wiremock &
                    WIREMOCK_PID=$!
                    sleep 20 #Esperamos 20 segundos para que Wiremock esté listo
                    '''

                    // Verificación de que Wiremock está disponible
                    echo "Verificando que Wiremock está disponible en el puerto 9090..."
                    sh '''
                    while ! nc -z localhost 9090; do
                        echo "Esperando que Wiremock se inicie..."
                        sleep 1
                    done
                    echo "Wiremock está listo en el puerto 9090"
                    '''

                    // Ejecutar las pruebas REST
                    echo "Ejecutando pruebas REST..."
                    sh '''
                    PYTHONPATH=$WORKSPACE python3 -m pytest test/rest
                    python3 -m pytest --junitxml=result-rest.xml test/rest
                    '''

                    // Detener los procesos de Flask y Wiremock
                    echo "Deteniendo Flask y Wiremock..."
                    sh '''
                    if [ -n "$FLASK_PID" ]; then
                        kill $FLASK_PID || true
                    fi
                    if [ -n "$WIREMOCK_PID" ]; then
                        kill $WIREMOCK_PID || true
                    fi
                    '''
                }
            }
        }

        stage("Resultados") {
            steps {
                junit 'result*.xml'
            }
        }
    }
}
