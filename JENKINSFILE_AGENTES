pipeline {
    agent none

    stages {
        stage("HELLO") {
            agent { label 'principal' }
            steps {
                echo "Hola, este es mi primer pipeline"
                sh 'echo "Usuario: $(whoami)"'
                sh 'echo "Hostname: $(hostname)"'
                echo "Workspace de esta etapa: ${env.WORKSPACE}"
            }
            post {
                always {
                    stash name: 'codigo', includes: '**/*'  // Stash del código antes de limpiar
                    deleteDir()  // Limpiar el workspace después de esta etapa
                }
            }
        }

        stage("Get Code") {
            agent { label 'principal' }  
            steps {
                echo "Obteniendo el código..."
                sh 'echo "Usuario: $(whoami)"'
                sh 'echo "Hostname: $(hostname)"'
                echo "Workspace de esta etapa: ${env.WORKSPACE}"
                unstash 'codigo'  // Unstash del código después de la limpieza
                git "https://github.com/anitap26/CP1.git"
                
                stash name: 'codigo', includes: '**/*'
            }
        }

        stage("Comprobar dirección") {
            agent { label 'principal' }  
            steps {
                echo "Comprobando el directorio..."
                sh 'echo "Usuario: $(whoami)"'
                sh 'echo "Hostname: $(hostname)"'
                echo "Workspace de esta etapa: ${env.WORKSPACE}"
                sh "ls -l"
            }
        }

        stage("Comprobar espacio de trabajo") {
            agent { label 'principal' }  
            steps {
                echo "Mi espacio de trabajo es ${env.WORKSPACE}"
                sh 'echo "Usuario: $(whoami)"'
                sh 'echo "Hostname: $(hostname)"'
                echo "Workspace de esta etapa: ${env.WORKSPACE}"
            }
        }

        stage("Build") {
            agent { label 'principal' }  
            steps {
                echo "No hago nada"
                sh 'echo "Usuario: $(whoami)"'
                sh 'echo "Hostname: $(hostname)"'
                echo "Workspace de esta etapa: ${env.WORKSPACE}"
            }
        }

        stage("Pruebas paralelo") {
            parallel {
                stage("Pruebas unitarias") {
                    agent { label 'agente2' }  
                    steps {
                        echo "Ejecutando pruebas unitarias"
                        sh 'echo "Usuario: $(whoami)"'
                        sh 'echo "Hostname: $(hostname)"'
                        echo "Workspace de esta etapa: ${env.WORKSPACE}"
                        
                        unstash 'codigo'
                        
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                            PYTHONPATH=$WORKSPACE python3 -m pytest test/unit
                            python3 -m pytest --junitxml=result-unit.xml test/unit
                            ls -l result-unit.xml  # Verifica si el archivo de resultados se generó
                            '''
                        }
                        
                        stash name: 'resultados-unit', includes: 'result-unit.xml'
                    }
                }

                stage("Pruebas REST") {
                    agent { label 'agente3' }  
                    steps {
                        echo "Ejecutando pruebas REST"
                        sh 'echo "Usuario: $(whoami)"'
                        sh 'echo "Hostname: $(hostname)"'
                        echo "Workspace de esta etapa: ${env.WORKSPACE}"
                        
                        unstash 'codigo'
                        
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                            # Lanza el servidor Flask
                            export FLASK_APP=$WORKSPACE/app/api.py
                            python3 -m flask run &
                            sleep 60

                            # Lanza Wiremock
                            java -jar /Users/anamunozallue/DESCARGAS/Wiremock/wiremock-standalone-3.10.0.jar --port 9090 --root-dir /Users/anamunozallue/DESCARGAS/Wiremock/mappings &
                            sleep 60

                            # Ejecutar las pruebas REST
                            PYTHONPATH=$WORKSPACE python3 -m pytest test/rest
                            python3 -m pytest --junitxml=result-rest.xml test/rest
                            ls -l result-rest.xml  # Verifica si el archivo de resultados se generó
                            '''
                        }
                        
                        stash name: 'resultados-rest', includes: 'result-rest.xml'
                    }
                }
            }
        }

        stage("Resultados") {
            agent { label 'principal' }  
            steps {
                echo "Resultados de las pruebas"
                sh 'echo "Usuario: $(whoami)"'
                sh 'echo "Hostname: $(hostname)"'
                echo "Workspace de esta etapa: ${env.WORKSPACE}"
                
                unstash 'resultados-unit'
                unstash 'resultados-rest'

                junit '**/result-*.xml'  // Procesa ambos archivos de resultados
            }
        }
    }
}
