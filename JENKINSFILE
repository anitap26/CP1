pipeline {
    agent any

    stages {
        stage("Get Code") {
            steps {
                git "https://github.com/anitap26/CP1.git"
            }
        }

        stage("Pruebas unitarias") {
            steps {
                sh '''
                PYTHONPATH=$WORKSPACE /opt/homebrew/bin/python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                /opt/homebrew/bin/python3 -m coverage xml
                /opt/homebrew/bin/python3 -m pytest --junitxml=result-unit.xml test/unit
                '''
                junit "result-unit.xml"
                
            }
            
        }

        stage("Pruebas REST") {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                    # Lanza el servidor Flask
                    export FLASK_APP=$WORKSPACE/app/api.py
                    python3 -m flask run &
                    sleep 30

                    # Lanza Wiremock
                    java -jar /Users/anamunozallue/DESCARGAS/Wiremock/wiremock-standalone-3.10.0.jar --port 9090 --root-dir /Users/anamunozallue/DESCARGAS/Wiremock &
                    sleep 60

                    # Ejecutar las pruebas REST
                    PYTHONPATH=$WORKSPACE python3 -m pytest test/rest
                    python3 -m pytest --junitxml=result-rest.xml test/rest
                    '''
                    junit "result-rest.xml"
                }
            }
        }

        stage("Coverage") {
            steps {
                catchError(buildResult: "UNSTABLE", stageResult: "FAILURE") {
                    cobertura coberturaReportFile: "coverage.xml", conditionalCoverageTargets: "90,80,0", lineCoverageTargets: "95,85,0"
                }
            }
        }

        stage("Static") {
            steps {
                sh '''
                # Análisis estático con flake8
                /Library/Frameworks/Python.framework/Versions/3.12/bin/flake8 --format=pylint --exit-zero app > flake8.out
                '''
                recordIssues tools: [flake8(name: "Flake8", pattern: "flake8.out")], 
                             qualityGates: [[threshold: 8, type: "TOTAL", unstable: true], [threshold: 10, type: "TOTAL", unstable: false]]
            }
        }

        stage("Security") {
            steps {
                sh '''
                # Escaneo de seguridad con Bandit
                export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.12/bin
                bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {severity}: {msg}"
                '''
                recordIssues tools: [pyLint(name: "Bandit", pattern: "bandit.out")], 
                             qualityGates: [[threshold: 2, type: "TOTAL", unstable: true], [threshold: 4, type: "TOTAL"]]
            }
        }

        stage("Performance") {
            steps {
                catchError(buildResult: "UNSTABLE", stageResult: "FAILURE") {
                    sh '''
                    # Configuración para pruebas de rendimiento con JMeter
                    export PATH=$PATH:/Users/anamunozallue/Downloads/apache-jmeter-5.6.3/bin
                    export FLASK_APP=$WORKSPACE/app/api.py
                    
                    python3 -m flask run --port=5001 &
                    FLASK_PID=$!
                    sleep 30 
                    
                    jmeter -n -t /Users/anamunozallue/CP1/test/jmeter/Performance.jmx -f -l performance.jtl

                    # Finaliza el proceso de Flask
                    kill $FLASK_PID
                    '''
                    perfReport sourceDataFiles: "performance.jtl"
                }
            }
        }
        
    }
    post {
        always {
            // Limpia el workspace al finalizar el pipeline
            cleanWs()
            
        }
        
    }
}

